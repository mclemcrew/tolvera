{# templates/template_flock.py.j2 #}
# --- {{ config.sketch_name }}.py ---
# Generated by Tolvera LLM Assistant

from tolvera import Tolvera, run
import taichi as ti

def main(**kwargs):
    """Main function to initialize and run the TÃ¶lvera sketch."""
    tv = Tolvera(
        particles={{ config.particle_count }},
        species={{ config.species_count }},
        name="{{ config.sketch_name }}",
        **kwargs
    )

    @ti.kernel
    def initial_setup():
        {% if species_rgba_map %}
        {% for index, rgba in species_rgba_map.items() %}
        tv.s.species[{{ index }}].rgba = ti.Vector({{ rgba }})
        {% endfor %}
        {% endif %}

        {% if config.flock_config and config.flock_config.rules %}
        {% for rule in config.flock_config.rules %}
        {% if rule.separate is not none %}
        tv.s.flock_s[{{ rule.species_from }}, {{ rule.species_to }}].separate = {{ rule.separate }}
        {% endif %}
        {% if rule.align is not none %}
        tv.s.flock_s[{{ rule.species_from }}, {{ rule.species_to }}].align = {{ rule.align }}
        {% endif %}
        {% if rule.cohere is not none %}
        tv.s.flock_s[{{ rule.species_from }}, {{ rule.species_to }}].cohere = {{ rule.cohere }}
        {% endif %}
        {% if rule.radius is not none %}
        tv.s.flock_s[{{ rule.species_from }}, {{ rule.species_to }}].radius = {{ rule.radius }}
        {% endif %}
        {% endfor %}
        {% endif %}

    initial_setup()

    @tv.render
    def _():
        {% if config.render_config.background_behavior == BackgroundBehavior.DIFFUSE %}
        tv.px.diffuse({{ config.render_config.diffuse_rate }})
        {% elif config.render_config.background_behavior == BackgroundBehavior.CLEAR %}
        tv.px.clear()
        {% endif %}

        tv.v.flock(tv.p)

        tv.px.particles(tv.p, tv.s.species(), shape='{{ config.render_config.particle_shape.value }}')

        return tv.px

if __name__ == '__main__':
    run(main)