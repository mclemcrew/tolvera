{# templates/template_slime.py.j2 #}
# --- {{ config.sketch_name }}.py ---
# Generated by Tolvera LLM Assistant

from tolvera import Tolvera, run
import taichi as ti

{% if BackgroundBehavior %}
from tolvera.llm.definitions import BackgroundBehavior
{% endif %}

def main(**kwargs):
    """Main function to set up and run the TÃ¶lvera slime sketch."""
    tv = Tolvera(
        particles={{ config.particle_count }},
        species={{ config.species_count }},
        name="{{ config.sketch_name }}",
        w={{ config.window_width }},
        h={{ config.window_height }},
        substep={{ config.num_substeps }},
        speed={{ config.global_speed }},
        **kwargs
    )

    # Configure Global Slime Parameters
    try:
        if hasattr(tv, 'v') and hasattr(tv.v, 'slime'):
            {% if config.slime_config %}
            tv.v.slime.evaporate[None] = float({{ config.slime_config.evaporate_rate | default(0.95) }})
            {% else %}
            tv.v.slime.evaporate[None] = 0.95
            {% endif %}
    except Exception:
        pass

    @ti.kernel
    def initial_setup():
        {% if species_rgba_map %}
        {% for index, rgba in species_rgba_map.items() %}
        if {{ index }} < tv.sn:
            tv.s.species[{{ index }}].rgba = ti.Vector({{ rgba }})
        {% endfor %}
        {% endif %}

        {% if config.species_configs %}
        {% for i in range(config.species_count) %}
        {% set sp_config = config.species_configs[i] %}
        {% set has_params = False %}
        if {{ i }} < tv.sn:
            {% if sp_config.slime_sense_angle is not none %}
            tv.s.slime_s[{{ i }}].sense_angle = {{ sp_config.slime_sense_angle }}
            {% set has_params = True %}
            {% endif %}
            {% if sp_config.slime_sense_dist is not none %}
            tv.s.slime_s[{{ i }}].sense_dist  = {{ sp_config.slime_sense_dist }}
            {% set has_params = True %}
            {% endif %}
            {% if sp_config.slime_move_angle is not none %}
            tv.s.slime_s[{{ i }}].move_angle  = {{ sp_config.slime_move_angle }}
            {% set has_params = True %}
            {% endif %}
            {% if sp_config.slime_move_step is not none %}
            tv.s.slime_s[{{ i }}].move_dist   = {{ sp_config.slime_move_step }}
            {% set has_params = True %}
            {% endif %}
            {% if not has_params %}
            pass  # No parameters set for this species
            {% endif %}
        {% endfor %}
        {% endif %}

    initial_setup()
    tv.p.randomise()

    @tv.render
    def _():
        {% set bg_behavior_val = config.render_config.background_behavior.value %}
        {% if bg_behavior_val == 'clear' %}
        tv.px.clear()
        {% elif bg_behavior_val == 'diffuse' %}
        tv.px.diffuse(float({{ config.render_config.diffuse_rate | default(0.95) }}))
        {% endif %}

        final_pixels = tv.px
        try:
            if hasattr(tv, 'v') and hasattr(tv.v, 'slime'):
                final_pixels = tv.v.slime(tv.p, tv.s.species())
        except Exception:
            pass

        return final_pixels

if __name__ == '__main__':
    run(main)